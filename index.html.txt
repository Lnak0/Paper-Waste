<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Smart Paper Waste Calculator</title>
  <style>
    :root{
      --bg:#0f172a;        /* slate-900 */
      --card:#111827;      /* gray-900 */
      --muted:#1f2937;     /* gray-800 */
      --text:#e5e7eb;      /* gray-200 */
      --sub:#94a3b8;       /* slate-400 */
      --accent:#22c55e;    /* green-500 */
      --accent-2:#60a5fa;  /* blue-400 */
      --warn:#f59e0b;      /* amber-500 */
      --danger:#ef4444;    /* red-500 */
      --shadow: 0 8px 24px rgba(0,0,0,.35);
      --radius: 18px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0; background:linear-gradient(180deg,var(--bg),#0b1224); color:var(--text); font:16px/1.5 system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial}
    .wrap{max-width:1100px; margin-inline:auto; padding:28px;}

    header{display:flex; gap:20px; align-items:center; justify-content:space-between; margin-bottom:22px}
    .brand{display:flex; align-items:center; gap:14px}
    .logo{width:46px;height:46px;border-radius:12px; background:conic-gradient(from 180deg at 50% 50%, var(--accent), var(--accent-2)); box-shadow:var(--shadow)}
    h1{margin:0;font-size:clamp(22px,3.6vw,34px)}
    .tag{color:var(--sub); font-size:14px}

    .grid{display:grid; grid-template-columns:1.1fr .9fr; gap:22px}
    @media (max-width: 920px){.grid{grid-template-columns:1fr}}

    .card{background:linear-gradient(180deg,rgba(255,255,255,.03),rgba(255,255,255,.02)); border:1px solid rgba(255,255,255,.08); border-radius:var(--radius); box-shadow:var(--shadow)}
    .card h2{margin:0 0 12px; font-size:clamp(18px,2.4vw,22px)}
    .card .inner{padding:18px}

    label{display:block; font-weight:600; margin:14px 0 6px}
    .row{display:flex; gap:12px; align-items:center}
    input[type="number"], input[type="range"]{
      width:100%; background:var(--muted); border:1px solid rgba(255,255,255,.08); color:var(--text); padding:12px 12px; border-radius:12px; outline:none;
    }
    input[type="range"]{height:36px}
    .hint{color:var(--sub); font-size:12px}
    .pill{display:inline-flex; gap:8px; align-items:center; background:rgba(255,255,255,.06); border:1px solid rgba(255,255,255,.08); padding:8px 12px; border-radius:999px; font-size:12px}

    .metrics{display:grid; grid-template-columns:repeat(auto-fit,minmax(180px,1fr)); gap:12px}
    .metric{background:rgba(255,255,255,.04); border:1px solid rgba(255,255,255,.06); padding:14px; border-radius:14px}
    .metric .k{font-size:13px; color:var(--sub)}
    .metric .v{font-size:22px; font-weight:800; margin-top:6px}

    .progress{height:9px; background:rgba(255,255,255,.08); border-radius:999px; overflow:hidden; margin-top:10px}
    .bar{height:100%; background:linear-gradient(90deg,var(--accent), var(--accent-2)); width:0%}

    .compare{margin-top:10px; font-size:14px; color:var(--sub)}

    .btns{display:flex; gap:10px; flex-wrap:wrap; margin-top:14px}
    button{background:var(--accent); color:#052e16; font-weight:700; border:none; border-radius:12px; padding:10px 14px; cursor:pointer}
    button.secondary{background:rgba(255,255,255,.06); color:var(--text); border:1px solid rgba(255,255,255,.12)}

    details{background:rgba(255,255,255,.03); border:1px solid rgba(255,255,255,.06); border-radius:12px; padding:12px}
    summary{cursor:pointer; font-weight:700}

    footer{margin:28px 0 8px; color:var(--sub); font-size:12px}
    code.const{background:rgba(255,255,255,.06); padding:3px 6px; border-radius:6px}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="brand">
        <div class="logo" aria-hidden="true"></div>
        <div>
          <h1>Smart Paper Waste Calculator</h1>
          <div class="tag">Estimate trees, water & CO₂ from your printing — and how to reduce it.</div>
        </div>
      </div>
    </header>

    <div class="grid">
      <!-- LEFT: Inputs -->
      <section class="card" aria-labelledby="inputs-title">
        <div class="inner">
          <h2 id="inputs-title">Inputs</h2>
          <div class="row">
            <div style="flex:1">
              <label for="pages">Pages printed (this week)</label>
              <input id="pages" type="number" min="0" step="1" value="100" />
              <div class="hint">Whole pages, before duplex or reprints.</div>
            </div>
          </div>

          <label for="duplex">Duplex (double‑sided) rate: <span id="duplexOut">50%</span></label>
          <input id="duplex" type="range" min="0" max="100" value="50" aria-describedby="duplex-help" />
          <div id="duplex-help" class="hint">Approx. share of jobs that were printed double‑sided.</div>

          <label for="reprints">Reprints / errors: <span id="reprintsOut">5%</span></label>
          <input id="reprints" type="range" min="0" max="100" value="5" />

          <label for="recycled">Recycled paper content: <span id="recycledOut">30%</span></label>
          <input id="recycled" type="range" min="0" max="100" value="30" />

          <label for="color">Color printing share: <span id="colorOut">20%</span></label>
          <input id="color" type="range" min="0" max="100" value="20" />

          <div class="btns">
            <button id="saveRow" title="Append this run to history">Save to history</button>
            <button id="exportCsv" class="secondary" title="Download history as CSV">Export CSV</button>
            <button id="reset" class="secondary" title="Reset inputs">Reset</button>
          </div>
        </div>
      </section>

      <!-- RIGHT: Results -->
      <section class="card" aria-labelledby="results-title">
        <div class="inner">
          <h2 id="results-title">Results (auto‑updated)</h2>
          <div class="metrics" role="region" aria-live="polite">
            <div class="metric"><div class="k">Adjusted pages</div><div class="v" id="mPages">—</div><div class="progress"><div id="barPages" class="bar"></div></div></div>
            <div class="metric"><div class="k">Trees used</div><div class="v" id="mTrees">—</div><div class="progress"><div id="barTrees" class="bar"></div></div></div>
            <div class="metric"><div class="k">Water (liters)</div><div class="v" id="mWater">—</div><div class="progress"><div id="barWater" class="bar"></div></div></div>
            <div class="metric"><div class="k">CO₂ (kg)</div><div class="v" id="mCO2">—</div><div class="progress"><div id="barCO2" class="bar"></div></div></div>
          </div>
          <div class="compare" id="compare">—</div>
        </div>
      </section>
    </div>

    <!-- HISTORY & TIPS -->
    <section class="card" style="margin-top:22px" aria-labelledby="history-title">
      <div class="inner">
        <h2 id="history-title">History</h2>
        <div class="hint">Saved runs are stored locally in your browser (no server needed).</div>
        <div id="history"></div>
      </div>
    </section>

    <section class="card" style="margin-top:22px" aria-labelledby="tips-title">
      <div class="inner">
        <h2 id="tips-title">Tips to Reduce Paper Waste</h2>
        <div class="metrics" style="grid-template-columns:repeat(auto-fit,minmax(240px,1fr))">
          <details open>
            <summary>Default to duplex</summary>
            <p>Set double‑sided printing as the default on shared printers. It typically cuts paper use by ~50% on those jobs.</p>
          </details>
          <details>
            <summary>Use print preview</summary>
            <p>Preview before printing to catch blank pages or wrong orientations that cause reprints.</p>
          </details>
          <details>
            <summary>Shrink margins / print 2‑up</summary>
            <p>Printing two pages per sheet for handouts can halve paper usage for reference material.</p>
          </details>
          <details>
            <summary>Digital submissions</summary>
            <p>Accept PDFs or online docs for homework and drafts; only print final copies if absolutely required.</p>
          </details>
          <details>
            <summary>Reuse one‑sided sheets</summary>
            <p>Create a “draft tray” for reusing single‑sided prints in classrooms and clubs.</p>
          </details>
          <details>
            <summary>Prefer recycled paper</summary>
            <p>Higher recycled content can reduce both water use and CO₂ per page.</p>
          </details>
        </div>
      </div>
    </section>

    <footer>
      <p><strong>Assumptions</strong>: 
        <span class="pill">1 tree ≈ 8000 sheets</span>
        <span class="pill">Virgin paper ≈ 10 L water / page</span>
        <span class="pill">Recycled paper ≈ 5 L water / page</span>
        <span class="pill">CO₂ per page: virgin ≈ 0.02 kg, recycled ≈ 0.012 kg</span>
      </p>
      <p>These are rough educational defaults. Edit the constants in code comments for your context.</p>
    </footer>
  </div>

  <script>
    // === Constants (edit these if your school has better data) ===
    const K_TREE_PER_PAGE = 1/8000;     // trees per page
    const K_WATER_VIRGIN = 10;          // liters per page
    const K_WATER_RECYCLED = 5;         // liters per page
    const K_CO2_VIRGIN = 0.02;          // kg per page (20 g)
    const K_CO2_RECYCLED = 0.012;       // kg per page (12 g)

    // Convenience: clamp helper
    const clamp = (v, lo, hi) => Math.min(hi, Math.max(lo, v));

    // DOM refs
    const pagesEl = document.getElementById('pages');
    const duplexEl = document.getElementById('duplex');
    const reprintsEl = document.getElementById('reprints');
    const recycledEl = document.getElementById('recycled');
    const colorEl = document.getElementById('color');

    const out = {
      duplex: document.getElementById('duplexOut'),
      reprints: document.getElementById('reprintsOut'),
      recycled: document.getElementById('recycledOut'),
      color: document.getElementById('colorOut'),
      mPages: document.getElementById('mPages'),
      mTrees: document.getElementById('mTrees'),
      mWater: document.getElementById('mWater'),
      mCO2: document.getElementById('mCO2'),
      barPages: document.getElementById('barPages'),
      barTrees: document.getElementById('barTrees'),
      barWater: document.getElementById('barWater'),
      barCO2: document.getElementById('barCO2'),
      compare: document.getElementById('compare'),
      history: document.getElementById('history'),
    };

    // Live label updates for sliders
    const fmtPct = v => `${v}%`;
    [
      [duplexEl, out.duplex],
      [reprintsEl, out.reprints],
      [recycledEl, out.recycled],
      [colorEl, out.color]
    ].forEach(([el, label]) => {
      const sync = () => label.textContent = fmtPct(el.value);
      el.addEventListener('input', sync);
      sync();
    });

    function compute(){
      const P = clamp(parseFloat(pagesEl.value) || 0, 0, 1e7);
      const ds = (parseFloat(duplexEl.value)||0)/100;     // 0..1
      const re = (parseFloat(reprintsEl.value)||0)/100;   // 0..1
      const rc = (parseFloat(recycledEl.value)||0)/100;   // 0..1
      const color = (parseFloat(colorEl.value)||0)/100;   // currently unused, but kept for extension (e.g., toner cost)

      // Adjusted pages: add reprints; duplex saves half on that share
      const effective_pages = P * (1 + re) * (1 - 0.5*ds);

      // Impacts (weighted by recycled content)
      const trees = effective_pages * K_TREE_PER_PAGE;
      const water = effective_pages * ((1-rc)*K_WATER_VIRGIN + rc*K_WATER_RECYCLED);
      const co2   = effective_pages * ((1-rc)*K_CO2_VIRGIN   + rc*K_CO2_RECYCLED);

      // Update UI numbers
      out.mPages.textContent = Math.round(effective_pages).toLocaleString();
      out.mTrees.textContent = trees.toFixed(2);
      out.mWater.textContent = Math.round(water).toLocaleString();
      out.mCO2.textContent   = co2.toFixed(2);

      // Cheap visual bars (normalized to a sensible max for looks)
      const norm = (v, max) => `${Math.min(100, Math.round((v/max)*100))}%`;
      out.barPages.style.width = norm(effective_pages, 1000);
      out.barTrees.style.width = norm(trees, 0.5);
      out.barWater.style.width = norm(water, 10000);
      out.barCO2.style.width   = norm(co2, 20);

      // What‑if: 100% duplex
      const pages_full_duplex = P * (1 + re) * (1 - 0.5*1);
      const saved = Math.max(0, effective_pages - pages_full_duplex);
      out.compare.textContent = `If all printing were duplex, you'd save about ${Math.round(saved).toLocaleString()} pages this period.`;

      return {P, ds, re, rc, color, effective_pages, trees, water, co2, ts: new Date().toISOString()};
    }

    // History in localStorage
    const KEY = 'paperWasteHistoryV1';
    function loadHistory(){
      try{ return JSON.parse(localStorage.getItem(KEY)) || []; }catch{return []}
    }
    function saveHistory(rows){ localStorage.setItem(KEY, JSON.stringify(rows)); }

    function renderHistory(){
      const rows = loadHistory();
      if(!rows.length){ out.history.innerHTML = '<div class="hint">No saved runs yet.</div>'; return; }
      const header = ['Date','Pages','Duplex%','Reprints%','Recycled%','Adj pages','Trees','Water (L)','CO₂ (kg)'];
      let html = '<div style="overflow:auto"><table role="table" style="width:100%; border-collapse:collapse; min-width:720px">';
      html += '<thead><tr>' + header.map(h=>`<th style="text-align:left; padding:10px; border-bottom:1px solid rgba(255,255,255,.12); color:var(--sub)">${h}</th>`).join('') + '</tr></thead>';
      html += '<tbody>' + rows.map(r=>{
        const d = new Date(r.ts);
        return `<tr>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${d.toLocaleString()}</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${r.P.toLocaleString()}</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${Math.round(r.ds*100)}%</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${Math.round(r.re*100)}%</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${Math.round(r.rc*100)}%</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${Math.round(r.effective_pages).toLocaleString()}</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${r.trees.toFixed(2)}</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${Math.round(r.water).toLocaleString()}</td>
          <td style="padding:10px; border-bottom:1px solid rgba(255,255,255,.06)">${r.co2.toFixed(2)}</td>
        </tr>`
      }).join('') + '</tbody></table></div>';
      html += '<div class="btns" style="margin-top:10px"><button id="clearHistory" class="secondary">Clear history</button></div>';
      out.history.innerHTML = html;
      document.getElementById('clearHistory').onclick = () => { saveHistory([]); renderHistory(); };
    }

    function toCSV(rows){
      const header = ['ts','pages','duplex','reprints','recycled','adj_pages','trees','water_l','co2_kg'];
      const lines = [header.join(',')];
      for(const r of rows){
        lines.push([
          r.ts,
          r.P,
          r.ds,
          r.re,
          r.rc,
          Math.round(r.effective_pages),
          r.trees.toFixed(2),
          Math.round(r.water),
          r.co2.toFixed(2)
        ].join(','))
      }
      return lines.join('\n');
    }

    // Wire buttons
    document.getElementById('saveRow').onclick = () => {
      const rec = compute();
      const rows = loadHistory();
      rows.push(rec); saveHistory(rows); renderHistory();
    };
    document.getElementById('exportCsv').onclick = () => {
      const csv = toCSV(loadHistory());
      const blob = new Blob([csv], {type:'text/csv'});
      const url = URL.createObjectURL(blob);
      const a = Object.assign(document.createElement('a'), {href:url, download:'paper_waste_history.csv'});
      document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url);
    };
    document.getElementById('reset').onclick = () => {
      pagesEl.value = 100; duplexEl.value = 50; reprintsEl.value = 5; recycledEl.value = 30; colorEl.value = 20;
      ['duplex','reprints','recycled','color'].forEach(k=>{ document.getElementById(k+'Out').textContent = fmtPct(document.getElementById(k).value); });
      compute();
    };

    // Recompute on any input change
    [pagesEl, duplexEl, reprintsEl, recycledEl, colorEl].forEach(el => el.addEventListener('input', compute));

    // Init
    compute();
    renderHistory();
  </script>
</body>
</html>